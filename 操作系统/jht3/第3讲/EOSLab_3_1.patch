From f06a1101612b007f1b6ed2d242b2b46a46b818cb Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=A7=9C=E6=B5=B7=E5=A4=A9?= <1076168468@qq.com>
Date: Sun, 23 Oct 2022 22:36:15 +0800
Subject: [PATCH] =?UTF-8?q?=E4=BB=BB=E5=8A=A1=E5=AE=8C=E6=88=90=EF=BC=8C?=
 =?UTF-8?q?=E6=8F=90=E4=BA=A4=E4=BD=9C=E4=B8=9A?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 EOSApp.c | 63 +++++++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 56 insertions(+), 7 deletions(-)

diff --git a/EOSApp.c b/EOSApp.c
index d8f2bae..ce44061 100644
--- a/EOSApp.c
+++ b/EOSApp.c
@@ -1,5 +1,13 @@
+/*
+提供该示例代码是为了阐释一个概念，或者进行一个测试，并不代表着
+最安全的编码实践，因此不应在应用程序或网站中使用该示例代码。对
+于超出本示例代码的预期用途以外的使用所造成的偶然或继发性损失，
+北京英真时代科技有限公司不承担任何责任。
+*/
+
 #include "EOSApp.h"
 
+
 //
 // main 函数参数的意义：
 // argc - argv 数组的长度，大小至少为 1，argc - 1 为命令行参数的数量。
@@ -13,14 +21,55 @@
 int main(int argc, char* argv[])
 {
 	//
-	// 如果需要在调试应用程序时能够调试进入内核并显示对应的源码，
-	// 必须使用 EOS 内核项目编译生成完全版本的 SDK 文件夹，然
-	// 后使用刚刚生成的 SDK 文件夹覆盖此应用程序项目中的 SDK 文件
-	// 夹，并且 EOS 内核项目在磁盘上的位置不能改变。
+	// 启动调试 EOS 应用程序前要特别注意下面的问题：
+	//
+	// 1、如果要在调试应用程序时能够调试进入内核并显示对应的源码，
+	//    必须使用 EOS 核心项目编译生成完全版本的 SDK 文件夹，然
+	//    后使用此文件夹覆盖应用程序项目中的 SDK 文件夹，并且 EOS
+	//    核心项目在磁盘上的位置不能改变。
+	//
+	
+	STARTUPINFO StartupInfo;
+	PROCESS_INFORMATION ProcInfo;
+	ULONG ulExitCode;	// 子进程退出码
+	INT nResult = 0;	// main 函数返回值。0 表示成功，非 0 表示失败。
+
+	printf("Create a process and wait for the process exit...\n\n");
+
+	//
+	// 使子进程和父进程使用相同的标准句柄。
 	//
+	StartupInfo.StdInput = GetStdHandle(STD_INPUT_HANDLE);
+	StartupInfo.StdOutput = GetStdHandle(STD_OUTPUT_HANDLE);
+	StartupInfo.StdError = GetStdHandle(STD_ERROR_HANDLE);
+
+	//
+	// 创建子进程。
+	//
+	if (CreateProcess("A:\\Hello.exe", NULL, 0, &StartupInfo, &ProcInfo)) {
+
+		//
+		// 创建子进程成功，等待子进程运行结束。
+		//
+		WaitForSingleObject(ProcInfo.ProcessHandle, INFINITE);
+
+		//
+		// 得到并输出子进程的退出码。
+		//
+		GetExitCodeProcess(ProcInfo.ProcessHandle, &ulExitCode);
+		printf("\nThe process exit with %d.\n", ulExitCode);
+
+		//
+		// 关闭不再使用的句柄。
+		//
+		CloseHandle(ProcInfo.ProcessHandle);
+		CloseHandle(ProcInfo.ThreadHandle);
+
+	} else {
 
-	/* TODO: 在此处添加自己的代码 */
-	printf("Hello world!\n");
+		printf("CreateProcess Failed, Error code: 0x%X.\n", GetLastError());
+		nResult = 1;
+	}
 
-	return 0;
+	return nResult;
 }
-- 
2.34.1.windows.1

